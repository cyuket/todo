__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/cyuket/Documents/works/native work/Todo-egghead/componet/row.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Row: {
            displayName: "Row"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/cyuket/Documents/works/native work/Todo-egghead/componet/row.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var Row = _wrapComponent("Row")(function (_Component) {
        _inherits(Row, _Component);

        function Row() {
            _classCallCheck(this, Row);

            return _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).apply(this, arguments));
        }

        _createClass(Row, [{
            key: "render",
            value: function render() {
                var _this2 = this;

                var complete = this.props.complete;

                var textComponent = _react3.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        style: styles.textWrap,
                        onLongPress: function onLongPress() {
                            return _this2.props.onToggleEdit(true);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 8
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: [styles.text, complete && styles.complete],
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 9
                            }
                        },
                        this.props.text,
                        " "
                    )
                );

                var removeButton = _react3.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        onPress: this.props.onRemove,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 13
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.destory,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 14
                            }
                        },
                        "X"
                    )
                );

                var edittingComponent = _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.textWrap,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 18
                        }
                    },
                    _react3.default.createElement(_reactNative.TextInput, {
                        onChangeText: this.props.onUpdate,
                        autoFocus: true,
                        value: this.props.text,
                        style: styles.input,
                        multiline: true,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 19
                        }
                    })
                );

                var doneButton = _react3.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        style: styles.done,
                        onPress: function onPress() {
                            return _this2.props.onToggleEdit(false);
                        },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 30
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: styles.doneText,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 31
                            }
                        },
                        "Save"
                    )
                );

                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.container,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 35
                        }
                    },
                    _react3.default.createElement(_reactNative.Switch, {
                        value: complete,
                        onValueChange: this.props.onComplete,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 36
                        }
                    }),
                    this.props.editing ? edittingComponent : textComponent,
                    this.props.editing ? doneButton : removeButton
                );
            }
        }]);

        return Row;
    }(_react2.Component));

    exports.default = Row;

    var styles = _reactNative.StyleSheet.create({
        container: {
            padding: 10,
            flexDirection: "row",
            alignItems: "flex-start",
            justifyContent: "space-between"
        },
        textWrap: {
            flex: 1,
            marginHorizontal: 10
        },
        complete: {
            textDecorationLine: "line-through"
        },
        destory: {
            fontSize: 30,
            color: "#cc9a9a"
        },
        text: {
            fontSize: 24,
            color: "#4d4d4d"
        },
        input: {
            height: 100,
            flex: 1,
            fontSize: 24,
            padding: 0,
            color: "#4d4d4d"
        },
        done: {
            borderRadius: 5,
            borderWidth: 2,
            borderColor: "#7be290",
            padding: 7
        },
        doneText: {
            color: "#4d4d4d",
            fontSize: 20
        }
    });
});